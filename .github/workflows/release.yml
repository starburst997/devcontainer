name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Initialize custom bot
        id: bot
        uses: starburst997/custom-bot-init@v1
        with:
          app-id: ${{ secrets.BOT_ID }}
          private-key: ${{ secrets.BOT_KEY }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.bot.outputs.token }}

      - name: Determine Version
        id: version
        uses: starburst997/auto-version@v1
        with:
          token: ${{ steps.bot.outputs.token }}
          update-major-minor: true
          git-push: false
          git-config: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Build and push Docker images
        run: |
          # Sort image directories by name length (shortest first) to ensure base images build before derived
          # e.g., "node" builds before "node-postgres"
          for IMAGE_DIR in $(find images/ -maxdepth 1 -mindepth 1 -type d | awk '{print length, $0}' | sort -n | cut -d' ' -f2-); do
            if [ -f "$IMAGE_DIR/Dockerfile" ]; then
              IMAGE_NAME=$(basename "$IMAGE_DIR")
              echo "Building image: $IMAGE_NAME"

              # Extract version components for additional tags
              VERSION=${{ steps.version.outputs.version }}
              MAJOR=$(echo $VERSION | cut -d. -f1)
              MAJOR_MINOR=$(echo $VERSION | cut -d. -f1-2)

              # Build and push with buildx
              docker buildx build \
                --platform linux/amd64,linux/arm64 \
                --push \
                --tag ${{ env.REGISTRY }}/${{ github.repository_owner }}/devcontainer/${IMAGE_NAME}:latest \
                --tag ${{ env.REGISTRY }}/${{ github.repository_owner }}/devcontainer/${IMAGE_NAME}:$MAJOR \
                --tag ${{ env.REGISTRY }}/${{ github.repository_owner }}/devcontainer/${IMAGE_NAME}:$MAJOR_MINOR \
                --tag ${{ env.REGISTRY }}/${{ github.repository_owner }}/devcontainer/${IMAGE_NAME}:$VERSION \
                --build-arg VERSION=$VERSION \
                --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
                --build-arg GITHUB_SHA=${{ github.sha }} \
                --cache-from type=gha,scope=${IMAGE_NAME} \
                --cache-to type=gha,mode=max,scope=${IMAGE_NAME} \
                "$IMAGE_DIR"

              echo "Successfully pushed $IMAGE_NAME"
            fi
          done

      - name: Install Dev Container CLI
        run: npm install -g @devcontainers/cli

      - name: Publish Templates and Features
        run: |
          # Update versions in all template files
          for template in templates/*/devcontainer-template.json; do
            if [ -f "$template" ]; then
              jq --arg version "${{ steps.version.outputs.version }}" '.version = $version' \
                "$template" > temp.json && mv temp.json "$template"
            fi
          done

          # Update versions in all feature files
          for feature in features/*/devcontainer-feature.json; do
            if [ -f "$feature" ]; then
              jq --arg version "${{ steps.version.outputs.version }}" '.version = $version' \
                "$feature" > temp.json && mv temp.json "$feature"
            fi
          done

          # Publish templates to GHCR
          if [ -d "templates" ]; then
            devcontainer templates publish \
              -r ${{ env.REGISTRY }} \
              -n ${{ github.repository_owner }}/devcontainer/templates \
              ./templates
          fi

          # Publish features to GHCR with /features/ namespace
          if [ -d "features" ]; then
            devcontainer features publish \
              -r ${{ env.REGISTRY }} \
              -n ${{ github.repository_owner }}/features \
              ./features
          fi
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Generate changelog and create release
        uses: starburst997/commits-logs@v1
        with:
          token: ${{ steps.bot.outputs.token }}
          git-push: true
