name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          # Get the latest tag, default to v0.0.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

          # Parse version (remove 'v' prefix)
          VERSION=${LATEST_TAG#v}
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT

          # Split into major.minor.patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Increment minor version, reset patch to 0
          NEW_MINOR=$((MINOR + 1))
          NEW_VERSION="$MAJOR.$NEW_MINOR.0"
          NEW_TAG="v$NEW_VERSION"

          # If this is the first version (v0.0.0), start at v1.0.0
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            NEW_VERSION="1.0.0"
            NEW_TAG="v1.0.0"
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

          echo "Latest tag: $LATEST_TAG"
          echo "New tag: $NEW_TAG"

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "${{ steps.get_tag.outputs.new_tag }}" >/dev/null 2>&1; then
            echo "Tag already exists, skipping release"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        if: steps.check_tag.outputs.skip == 'false'
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"

          # Get commits since last tag
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Create changelog
          CHANGELOG="## Changes
          $COMMITS"

          # Save to file for release notes
          echo "$CHANGELOG" > CHANGELOG.md

          echo "Changelog generated"

      - name: Set up Docker Buildx
        if: steps.check_tag.outputs.skip == 'false'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: steps.check_tag.outputs.skip == 'false'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        if: steps.check_tag.outputs.skip == 'false'
        uses: docker/build-push-action@v5
        with:
          context: ./images/personal-dev
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/devcontainer/personal-dev:${{ steps.get_tag.outputs.new_version }}
            ghcr.io/${{ github.repository_owner }}/devcontainer/personal-dev:latest
          labels: |
            org.opencontainers.image.title=Personal Dev Container
            org.opencontainers.image.description=Personal development environment with Node.js, PowerLevel10k, neovim, Claude Code, and GitHub CLI
            org.opencontainers.image.version=${{ steps.get_tag.outputs.new_version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.licenses=MIT
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install Dev Container CLI
        if: steps.check_tag.outputs.skip == 'false'
        run: npm install -g @devcontainers/cli

      - name: Publish Templates
        if: steps.check_tag.outputs.skip == 'false'
        run: |
          # Update template version in devcontainer-template.json
          jq --arg version "${{ steps.get_tag.outputs.new_version }}" '.version = $version' \
            src/nodejs-postgres/devcontainer-template.json > temp.json && \
            mv temp.json src/nodejs-postgres/devcontainer-template.json

          # Publish templates to GHCR
          devcontainer templates publish \
            -r ghcr.io \
            -n ${{ github.repository_owner }}/devcontainer/templates \
            ./src
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push tag
        if: steps.check_tag.outputs.skip == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ steps.get_tag.outputs.new_tag }}" -m "Release ${{ steps.get_tag.outputs.new_tag }}"
          git push origin "${{ steps.get_tag.outputs.new_tag }}"

      - name: Create GitHub Release
        if: steps.check_tag.outputs.skip == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_tag.outputs.new_tag }}
          name: Release ${{ steps.get_tag.outputs.new_version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
